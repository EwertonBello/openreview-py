'''
Standard webfield templates.

'''

class TabbedHomepage(object):

  def __init__(self, js_constants, group_id, subject_areas = None):

    self.js_constants = js_constants

    self.constants_block =[
      'var SUBJECT_AREAS_LIST = [];',
      'var BUFFER = 1000 * 60 * 30;  // 30 minutes',
      'var PAGE_SIZE = 50;',
      'var paperDisplayOptions = {',
      '  pdfLink: true,',
      '  replyCount: true,',
      '  showContents: true',
      '};',

      'var commentDisplayOptions = {',
      '  pdfLink: false,',
      '  replyCount: true,',
      '  showContents: false,',
      '  showParent: true',
      '};',

      'var initialPageLoad = true;'
      ]

    for k, v in self.js_constants.iteritems():
      if v:
        self.constants_block.append('var {k} = \'{v}\';'.format(k=k, v=v))

    self.constants_block += [
      'var CONFERENCE_REGEX = CONFERENCE.replace(\'.\', \'\\\\.\').replace(\'/\',\'\\\\/\')',
      'var WILDCARD_INVITATION = CONFERENCE + \'/-/.*\';'
      ]

    if subject_areas:
      subj = ['var SUBJECT_AREAS_LIST = ['] + ['"{}",\n'.format(s) for s in subject_areas] + ['];']
      self.constants_block += subj

    self.instructions = self.constants_block + [
      '// Main is the entry point to the webfield code and runs everything',
      'function main() {',
      '  Webfield.ui.setup(\'#group-container\', CONFERENCE);  // required',
      '  renderConferenceHeader();',
      '  renderSubmissionButton();',
      '  renderConferenceTabs();',
      '  load().then(renderContent);',
      '}',
      '',
      '// Load makes all the API calls needed to get the data to render the page',
      '// It returns a jQuery deferred object: https://api.jquery.com/category/deferred-object/',
      'function load() {',
      '  var notesP = Webfield.api.getSubmissions(BLIND_INVITATION, {',
      '    pageSize: PAGE_SIZE',
      '  });',
      '',
      '  var submittedNotesP = Webfield.api.getSubmissions(WILDCARD_INVITATION, {',
      '    pageSize: PAGE_SIZE,',
      '    tauthor: true',
      '  });',
      '',
      '  var assignedNotePairsP = Webfield.api.getSubmissions(WILDCARD_INVITATION, {',
      '    pageSize: 100,',
      '    invitee: true,',
      '    duedate: true',
      '  });',
      '',
      '  var userGroupsP;',
      '  var authorNotesP;',
      '  if (!user || _.startsWith(user.id, \'guest_\')) {',
      '    userGroupsP = $.Deferred().resolve([]);',
      '    authorNotesP = $.Deferred().resolve([]);',
      '',
      '  } else {',
      '    userGroupsP = Webfield.get(\'/groups\', {member: user.id}).then(function(result) {',
      '      return _.filter(',
      '        _.map(result.groups, function(g) { return g.id; }),',
      '        function(id) { return _.startsWith(id, CONFERENCE); }',
      '      );',
      '    });',
      '',
      '    authorNotesP = Webfield.get(\'/notes/search\', {',
      '      term: user.profile.id,',
      '      group: CONFERENCE,',
      '      content: \'authors\',',
      '      source: \'forum\'',
      '    }).then(function(result) {',
      '      return result.notes;',
      '    });',
      '  }',
      '',
      '  var tagInvitationsP = Webfield.api.getTagInvitations(BLIND_INVITATION);',
      '',
      '  return userGroupsP',
      '  .then(function(userGroups) {',
      '',
      '    var assignedPaperNumbers = getPaperNumbersfromGroups(userGroups);',
      '    var assignedNotesP = $.Deferred().resolve([]);',
      '',
      '    if (assignedPaperNumbers.length) {',
      '        assignedNotesP = Webfield.api.getSubmissions(BLIND_INVITATION, {',
      '        pageSize: PAGE_SIZE,',
      '        number: assignedPaperNumbers.join()',
      '      });',
      '    }',
      '',
      '    return $.when(',
      '      notesP, submittedNotesP, assignedNotePairsP, assignedNotesP, userGroups,',
      '      authorNotesP, tagInvitationsP',
      '    );',
      '  });',
      '',
      '}',
      '',
      '',
      '// Render functions',
      'function renderConferenceHeader() {',
      '  Webfield.ui.venueHeader({',
      '    title: TITLE,',
      '    subtitle: SUBTITLE,',
      '    location: LOCATION,',
      '    date: DATE,',
      '    website: WEBSITE,',
      '    instructions: INSTRUCTIONS,',
      '    deadline: DEADLINE',
      '  });',
      '',
      '  Webfield.ui.spinner(\'#notes\');',
      '}',
      '',
      'function renderSubmissionButton() {',
      '  Webfield.api.getSubmissionInvitation(SUBMISSION_INVITATION, {deadlineBuffer: BUFFER})',
      '    .then(function(invitation) {',
      '      Webfield.ui.submissionButton(invitation, user, {',
      '        onNoteCreated: function() {',
      '          // Callback funtion to be run when a paper has successfully been submitted (required)',
      '          promptMessage(\'Your submission to \' + TITLE + \' is complete. The list of all current submissions is shown below.\');',
      '',
      '          load().then(renderContent).then(function() {',
      '            $(\'.tabs-container a[href="#all-submitted-papers"]\').click();',
      '          });',
      '        }',
      '      });',
      '    });',
      '}',
      '',
      'function renderConferenceTabs() {',
      '  var sections = [',
      '    {',
      '      heading: \'All Submitted Papers\',',
      '      id: \'all-submitted-papers\',',
      '    },',
      '    {',
      '      heading: \'My Tasks\',',
      '      id: \'my-tasks\',',
      '    },',
      '    {',
      '      heading: \'My Submitted Papers\',',
      '      id: \'my-submitted-papers\',',
      '    },',
      '    {',
      '      heading: \'My Assigned Papers\',',
      '      id: \'my-assigned-papers\',',
      '    },',
      '    {',
      '      heading: \'My Comments & Reviews\',',
      '      id: \'my-comments-reviews\',',
      '    },',
      '  ];',
      '',
      '  Webfield.ui.tabPanel(sections, {',
      '    container: \'#notes\',',
      '    hidden: true',
      '  });',
      '}',
      '',
      'function renderContent(notes, submittedNotes, assignedNotePairs, assignedNotes, userGroups, authorNotes, tagInvitations) {',
      '  var data, commentNotes;',
      '',
      '  // if (_.isEmpty(userGroups)) {',
      '  //   // If the user isn\'t part of the conference don\'t render tabs',
      '  //   $(\'.tabs-container\').hide();',
      '  //   return;',
      '  // }',
      '',
      '  commentNotes = [];',
      '  _.forEach(submittedNotes, function(note) {',
      '    if (!_.isNil(note.ddate)) {',
      '      return;',
      '    }',
      '    if (!_.includes([SUBMISSION_INVITATION, RECRUIT_REVIEWERS], note.invitation)) {',
      '      commentNotes.push(note);',
      '    }',
      '  });',
      '',
      '  // Filter out all tags that belong to other users (important for bid tags)',
      '  notes = _.map(notes, function(n) {',
      '    n.tags = _.filter(n.tags, function(t) {',
      '      return !_.includes(t.signatures, user.id);',
      '    });',
      '    return n;',
      '  });',
      '',
      '  var assignedPaperNumbers = getPaperNumbersfromGroups(userGroups);',
      '  if (assignedPaperNumbers.length !== assignedNotes.length) {',
      '    console.warn(\'WARNING: The number of assigned notes returned by API does not \' +',
      '      \'match the number of assigned note groups the user is a member of.\');',
      '  }',
      '',
      '  var authorPaperNumbers = getAuthorPaperNumbersfromGroups(userGroups);',
      '  if (authorPaperNumbers.length !== authorNotes.length) {',
      '    console.warn(\'WARNING: The number of submitted notes returned by API does not \' +',
      '      \'match the number of submitted note groups the user is a member of.\');',
      '  }',
      '',
      '  // My Tasks tab',
      '  if (userGroups.length) {',
      '    var tasksOptions = {',
      '      container: \'#my-tasks\',',
      '      emptyMessage: \'No outstanding tasks for \' + TITLE',
      '    }',
      '    Webfield.ui.taskList(assignedNotePairs, tagInvitations, tasksOptions)',
      '  } else {',
      '    $(\'.tabs-container a[href="#my-tasks"]\').parent().hide();',
      '  }',
      '',
      '  // All Submitted Papers tab',
      '  var submissionListOptions = _.assign({}, paperDisplayOptions, {',
      '    showTags: true,',
      '    tagInvitations: tagInvitations,',
      '    container: \'#all-submitted-papers\'',
      '  });',
      '',
      '  Webfield.ui.submissionList(notes, {',
      '    heading: null,',
      '    container: \'#all-submitted-papers\',',
      '    search: {',
      '      enabled: true,',
      '      subjectAreas: SUBJECT_AREAS_LIST,',
      '      onResults: function(searchResults) {',
      '        var blindedSearchResults = searchResults.filter(function(note) {',
      '          return note.invitation === BLIND_INVITATION;',
      '        });',
      '        Webfield.ui.searchResults(blindedSearchResults, submissionListOptions);',
      '        Webfield.disableAutoLoading();',
      '      },',
      '      onReset: function() {',
      '        Webfield.ui.searchResults(notes, submissionListOptions);',
      '        if (notes.length === PAGE_SIZE) {',
      '          Webfield.setupAutoLoading(BLIND_INVITATION, PAGE_SIZE, submissionListOptions);',
      '        }',
      '      }',
      '    },',
      '    displayOptions: submissionListOptions,',
      '    fadeIn: false',
      '  });',
      '',
      '  if (notes.length === PAGE_SIZE) {',
      '    Webfield.setupAutoLoading(BLIND_INVITATION, PAGE_SIZE, submissionListOptions);',
      '  }',
      '',
      '  // My Submitted Papers tab',
      '  if (authorNotes.length) {',
      '    Webfield.ui.searchResults(',
      '      authorNotes,',
      '      _.assign({}, paperDisplayOptions, {container: \'#my-submitted-papers\'})',
      '    );',
      '  } else {',
      '    $(\'.tabs-container a[href="#my-submitted-papers"]\').parent().hide();',
      '  }',
      '',
      '  // My Assigned Papers tab (only show if not empty)',
      '  if (assignedNotes.length) {',
      '    Webfield.ui.searchResults(',
      '      assignedNotes,',
      '      _.assign({}, paperDisplayOptions, {container: \'#my-assigned-papers\'})',
      '    );',
      '  } else {',
      '    $(\'.tabs-container a[href="#my-assigned-papers"]\').parent().hide();',
      '  }',
      '',
      '  // My Comments & Reviews tab (only show if not empty)',
      '  if (commentNotes.length) {',
      '    Webfield.ui.searchResults(',
      '      commentNotes,',
      '      _.assign({}, commentDisplayOptions, {',
      '        container: \'#my-comments-reviews\',',
      '        emptyMessage: \'No comments or reviews to display\'',
      '      })',
      '    );',
      '  } else {',
      '    $(\'.tabs-container a[href="#my-comments-reviews"]\').parent().hide();',
      '  }',
      '',
      '  $(\'#notes .spinner-container\').remove();',
      '  $(\'.tabs-container\').show();',
      '',
      '  // Show first available tab',
      '  if (initialPageLoad) {',
      '    $(\'.tabs-container ul.nav-tabs li a:visible\').eq(0).click();',
      '    initialPageLoad = false;',
      '  }',
      '}',
      '',
      '// Helper functions',
      'function getPaperNumbersfromGroups(groups) {',
      '  var re = new RegExp(\'^\' + CONFERENCE_REGEX + \'\/Paper([0-9]+)\/(AnonReviewer[0-9]+|Area_Chair)\');',
      '  return _.map(',
      '    _.filter(groups, function(gid) { return re.test(gid); }),',
      '    function(fgid) { return parseInt(fgid.match(re)[1], 10); }',
      '  );',
      '}',
      '',
      'function getAuthorPaperNumbersfromGroups(groups) {',
      '  var re = new RegExp(\'^\' + CONFERENCE_REGEX + \'\/Paper(\d+)\/Authors\');',
      '  return _.map(',
      '    _.filter(groups, function(gid) { return re.test(gid); }),',
      '    function(fgid) { return parseInt(fgid.match(re)[1], 10); }',
      '  );',
      '}',
      '',
      'function getDueDateStatus(date) {',
      '  var day = 24 * 60 * 60 * 1000;',
      '  var diff = Date.now() - date.getTime();',
      '',
      '  if (diff > 0) {',
      '    return \'expired\';',
      '  }',
      '  if (diff > -3 * day) {',
      '    return \'warning\';',
      '  }',
      '  return '';',
      '}',
      '',
      '// Go!',
      'main();',

    ]

  def render(self):
    return '\n'.join(self.instructions)


class BidWebfield(object):
  def __init__(self, js_constants, group_id, subject_areas = None):

    self.js_constants = js_constants

    self.constants_block = []

    for k, v in self.js_constants.iteritems():
      if v:
        self.constants_block.append('var {k} = \'{v}\';'.format(k=k, v=v))

    self.default_constants = [
      "// Constants",
      "var BLIND_INVITATION = CONFERENCE + '/-/Blind_Submission';",
      "var ADD_BID = CONFERENCE + '/-/Add_Bid'",
      "var SUBJECT_AREAS_LIST = [];",
      "var PAGE_SIZE = 1000;",
    ]

    self.constants_block += self.default_constants

    if subject_areas:
      subj = ['var SUBJECT_AREAS_LIST = ['] + ['"{}",\n'.format(s) for s in subject_areas] + ['];']
      self.constants_block += subj

    self.instructions = self.constants_block + [
      "// Main is the entry point to the webfield code and runs everything",
      "function main() {",
      "  Webfield.ui.setup('#invitation-container', CONFERENCE);  // required",
      "",
      "  Webfield.ui.header('ICLR 2018 Paper Bidding');  // ICLR specific",
      "",
      "  Webfield.ui.spinner('#notes');",
      "",
      "  OpenBanner.breadcrumbs([",
      "    { link: '/', text: 'Venues' },",
      "    { link: '/group?id=' + CONFERENCE, text: view.prettyId(CONFERENCE) }",
      "  ]);",
      "",
      "  load().then(renderContent);",
      "}",
      "",
      "function load() {",
      "  var notesP = Webfield.api.getSubmissions(BLIND_INVITATION, {",
      "    pageSize: PAGE_SIZE",
      "  });",
      "",
      "  var tagInvitationsP = Webfield.get('/invitations', {id: ADD_BID}).then(function(result) {",
      "    return _.filter(result.invitations, function(invitation) {",
      "      return invitation.invitees.length;",
      "    });",
      "  });",
      "",
      "  return $.when(notesP, tagInvitationsP);",
      "}",
      "",
      "function renderContent(allNotes, tagInvitations) {",
      "  var activeTab = 0;",
      "",
      "  var validNotes = allNotes.filter(function(note) {",
      "    return !note.content.hasOwnProperty('withdrawal');",
      "  });",
      "",
      "  var paperDisplayOptions = {",
      "    pdfLink: true,",
      "    replyCount: true,",
      "    showContents: true,",
      "    showTags: true,",
      "    tagInvitations: tagInvitations",
      "  };",
      "",
      "  $('#invitation-container').on('shown.bs.tab', 'ul.nav-tabs li a', function(e) {",
      "    activeTab = $(e.target).data('tabIndex');",
      "  });",
      "",
      "  $('#invitation-container').on('bidUpdated', '.tag-widget', function(e, tagObj) {",
      "    var updatedNote = _.find(validNotes, ['id', tagObj.forum]);",
      "    if (!updatedNote) {",
      "      return;",
      "    }",
      "    var prevVal = _.has(updatedNote, 'tags[0].tag') ? updatedNote.tags[0].tag : 'No bid';",
      "    updatedNote.tags[0] = tagObj;",
      "",
      "    var tagToElemId = {",
      "      'I want to review': '#wantToReview',",
      "      'I can review': '#canReview',",
      "      'I can probably review but am not an expert': '#probablyReview',",
      "      'I cannot review': '#canNotReview',",
      "      'No bid': '#noBid'",
      "    };",
      "",
      "    var $sourceContainer = $(tagToElemId[prevVal] + ' .submissions-list');",
      "    var $note = $sourceContainer.find('li.note[data-id="' + tagObj.forum + '"]').detach();",
      "    if (!$sourceContainer.children().length) {",
      "      $sourceContainer.append('<li><p class=\"empty-message\">No papers to display at this time</p></li>');",
      "    }",
      "",
      "    var $destContainer = $(tagToElemId[tagObj.tag] + ' .submissions-list');",
      "    if ($destContainer.find('p.empty-message').length) {",
      "      $destContainer.empty();",
      "    }",
      "    $destContainer.prepend($note);",
      "",
      "    updateCounts();",
      "  });",
      "",
      "  function updateNotes(notes) {",
      "    // Sort notes by bid",
      "    var wantToReview = [];",
      "    var canReview = [];",
      "    var probablyReview = [];",
      "    var canNotReview = [];",
      "    var noBid = [];",
      "    notes.forEach(function(n) {",
      "      if (n.tags.length) {",
      "        if (n.tags[0].tag === 'I want to review') {",
      "          wantToReview.push(n);",
      "        } else if (n.tags[0].tag === 'I can review') {",
      "          canReview.push(n);",
      "        } else if (n.tags[0].tag === 'I can probably review but am not an expert') {",
      "          probablyReview.push(n);",
      "        } else if (n.tags[0].tag === 'I cannot review') {",
      "          canNotReview.push(n);",
      "        } else {",
      "          noBid.push(n);",
      "        }",
      "      } else {",
      "        noBid.push(n);",
      "      }",
      "    });",
      "",
      "    var bidCount = wantToReview.length + canReview.length + probablyReview.length + canNotReview.length;",
      "",
      "    $('#header h3').remove();",
      "    $('#header').append('<h3>You have completed ' + bidCount + ' bids</h3>');",
      "",
      "    var sections = [",
      "      {",
      "        heading: 'All Papers &nbsp;<span class=\"glyphicon glyphicon-search\"></span>',",
      "        id: 'allPapers',",
      "        content: null",
      "      },",
      "      {",
      "        heading: 'No bid',",
      "        headingCount: noBid.length,",
      "        id: 'noBid',",
      "        content: null",
      "      },",
      "      {",
      "        heading: 'I want to review',",
      "        headingCount: wantToReview.length,",
      "        id: 'wantToReview',",
      "        content: null",
      "      },",
      "      {",
      "        heading: 'I can review',",
      "        headingCount: canReview.length,",
      "        id: 'canReview',",
      "        content: null",
      "      },",
      "      {",
      "        heading: 'I can probably review but am not an expert',",
      "        headingCount: probablyReview.length,",
      "        id: 'probablyReview',",
      "        content: null",
      "      },",
      "      {",
      "        heading: 'I cannot review',",
      "        headingCount: canNotReview.length,",
      "        id: 'canNotReview',",
      "        content: null",
      "      }",
      "    ];",
      "    sections[activeTab].active = true;",
      "    $('#notes .tabs-container').remove();",
      "    Webfield.ui.tabPanel(sections, {",
      "      container: '#notes',",
      "      hidden: true",
      "    });",
      "",
      "    Webfield.ui.submissionList(wantToReview, {",
      "      heading: null,",
      "      container: '#wantToReview',",
      "      search: { enabled: false },",
      "      displayOptions: paperDisplayOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    Webfield.ui.submissionList(canReview, {",
      "      heading: null,",
      "      container: '#canReview',",
      "      search: { enabled: false },",
      "      displayOptions: paperDisplayOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    Webfield.ui.submissionList(probablyReview, {",
      "      heading: null,",
      "      container: '#probablyReview',",
      "      search: { enabled: false },",
      "      displayOptions: paperDisplayOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    Webfield.ui.submissionList(canNotReview, {",
      "      heading: null,",
      "      container: '#canNotReview',",
      "      search: { enabled: false },",
      "      displayOptions: paperDisplayOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    Webfield.ui.submissionList(noBid, {",
      "      heading: null,",
      "      container: '#noBid',",
      "      search: { enabled: false },",
      "      displayOptions: paperDisplayOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    var submissionListOptions = _.assign({}, paperDisplayOptions, {container: '#allPapers'});",
      "    Webfield.ui.submissionList(notes, {",
      "      heading: null,",
      "      container: '#allPapers',",
      "      search: {",
      "        enabled: true,",
      "        subjectAreas: SUBJECT_AREAS_LIST,",
      "        onResults: function(searchResults) {",
      "          var blindedSearchResults = searchResults.filter(function(note) {",
      "            return note.invitation === BLIND_INVITATION;",
      "          });",
      "          Webfield.ui.searchResults(blindedSearchResults, submissionListOptions);",
      "        },",
      "        onReset: function() {",
      "          Webfield.ui.searchResults(notes, submissionListOptions);",
      "        }",
      "      },",
      "      displayOptions: submissionListOptions,",
      "      fadeIn: false",
      "    });",
      "",
      "    $('#notes .spinner-container').remove();",
      "    $('#notes .tabs-container').show();",
      "  }",
      "",
      "  function updateCounts() {",
      "    var containers = [",
      "      '#noBid',",
      "      '#wantToReview',",
      "      '#canReview',",
      "      '#probablyReview',",
      "      '#canNotReview'",
      "    ];",
      "    var totalCount = 0;",
      "",
      "    containers.forEach(function(containerId) {",
      "      var numPapers = $(containerId).find('li.note').length;",
      "      if (containerId !== '#noBid') {",
      "        totalCount += numPapers;",
      "      }",
      "",
      "      $tab = $('ul.nav-tabs li a[href="' + containerId + '"]');",
      "      $tab.find('span.badge').remove();",
      "      if (numPapers) {",
      "        $tab.append('<span class=\"badge\">' + numPapers + '</span>');",
      "      }",
      "    });",
      "",
      "    $('#header h3').remove();",
      "    $('#header').append('<h3>You have completed ' + totalCount + ' bids</h3>');",
      "  }",
      "",
      "  updateNotes(validNotes);",
      "}",
      "",
      "// Go!",
      "main();",
      "",
    ]

  def render(self):
    return '\n'.join(self.instructions)
